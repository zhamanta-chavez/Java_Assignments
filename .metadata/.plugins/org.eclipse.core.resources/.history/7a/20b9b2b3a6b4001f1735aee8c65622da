import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.GridLayout;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.swing.*;

/* Zhamanta 
 * INEW 2338
 * Description: Week 7  Assignment
 * User Management and Content Application
 */

class User 
{
	private String username;
	private String password;
	private String role;
	
	public User(String username, String password, String role)
	{
		this.username = username;
		this.password = password;
		this.role = role;
	}

	public String getUsername()
	{
		return username;
	}
	
	public String getPassword()
	{
		return password;
	}
	
	public String getRole()
	{
		return role;
	}
}

class Product
{
	private String name;
	private double price;
	
	public Product(String name, double price)
	{
		this.name = name;
		this.price = price;
	}
	
	@Override
	public String toString()
	{
		return "Product{name='" + name + "', price=" + price + "}";
	}
}

public class UserManagementContentApplication 
{
	private static Map<String, User> users = new HashMap<>();
	private static List<String> posts = new ArrayList<>();
	private static List<Product> products = new ArrayList<>();
	private static final String LOG_FILE = "log.txt";
	
	public static void main(String[] args) 
	{
		SwingUtilities.invokeLater(() -> {
			JFrame frame = new JFrame("Capstone Application");
			frame.setSize(600, 400);
			frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
			
			JPanel loginPanel = createLoginPanel(frame);
			frame.add(loginPanel);
			
			frame.setVisible(true);
		});
	}
	
	private static JPanel createLoginPanel(JFrame frame)
	{
		JPanel panel = new JPanel();
		panel.setLayout(null);
		
		JLabel userLabel = new JLabel("Username:");
		userLabel.setBounds(10, 20, 100, 25);
		panel.add(userLabel);
		
		JTextField userField = new JTextField(20);
		userField.setBounds(120, 20, 200, 25);
		panel.add(userField);
		
		JLabel passwordLabel = new JLabel("Password:");
		passwordLabel.setBounds(10, 60, 100, 25);
		panel.add(passwordLabel);
		
		JPasswordField passwordField = new JPasswordField(20);
		passwordField.setBounds(120, 60, 200, 25);
		panel.add(passwordField);
		
		JButton loginButton = new JButton("Login");
		loginButton.setBounds(10, 100, 150, 25);
		panel.add(loginButton);
		
		JButton registerButton = new JButton("Register");
		registerButton.setBounds(200, 100, 150, 25);
		panel.add(registerButton);
		
		loginButton.addActionListener(e -> {
			String username = userField.getText();
			String password = new String(passwordField.getPassword());
			if (users.containsKey(username) && users.get(username).getPassword().equals(password))
			{
				JOptionPane.showMessageDialog(panel, "Login successfyl");
				frame.getContentPane().removeAll();
				frame.add(createDashboardPanel(frame, users.get(username)));
				frame.revalidate();
				frame.repaint();
			} else
			{
				JOptionPane.showMessageDialog(panel,  "invalid credentials!");
				logAction("Failed login attempt for username: " + username);
			}
		});
		
		registerButton.addActionListener(e -> {
			String username = userField.getText();
			String password = new String(passwordField.getPassword());
			if (!users.containsKey(username))
			{
				users.put(username,  new User(username, password, "RegularUser"));
				JOptionPane.showMessageDialog(panel,  "User registered successfully!");
				logAction("User " + username + " registered.");
			} else
			{
				JOptionPane.showMessageDialog(panel, "Username already exists!");
			}
		});
		
		return panel;
	}
	
	private static JPanel createDashboardPanel(JFrame frame, User user)
	{
		JPanel panel = new JPanel();
		panel.setLayout(new GridLayout(2, 3, 10, 10));
		
		JButton productButton = new JButton("Product Catalog");
		JButton postsButton = new JButton("Social Feed");
		JButton searchButton = new JButton("Directory Search");
		JButton logButton = new JButton("View Logs");
		JButton logoutButton = new JButton("Logout");
		
		productButton.addActionListener(e -> {
			JFrame productFrame = createProductCatalogFrame();
			productFrame.setVisible(true);
		});
		
		postsButton.addActionListener(e -> {
			JFrame postsFrame = createSocialFeedFrame();
			postsFrame.setVisible(true);
		});
		
		searchButton.addActionListener(e -> {
			JFrame searchFrame = createDirectorySearchFrame();
			searchFrame.setVisible(true);
		});
		
		logButton.addActionListener(e -> {
			try
			{
				List<String> logs = readLogs();
				JTextArea logArea = new JTextArea(String.join("\n", logs));
				JScrollPane scrollPane = new JScrollPane(logArea);
				scrollPane.setPreferredSize(new Dimension(400, 300));
				JOptionPane.showMessageDialog(frame, scrollPane, "Application Logs", JOptionPane.INFORMATION_MESSAGE);
			} catch (IOException ex) 
			{
				JOptionPane.showMessageDialog(frame, "Error reading log file!");
			}
		});
		
		logoutButton.addActionListener(e -> {
			frame.getContentPane().removeAll();
			frame.add(createLoginPanel(frame));
			frame.revalidate();
			frame.repaint();
		});
		
		panel.add(productButton);
		panel.add(postsButton);
		panel.add(searchButton);
		panel.add(logButton);
		panel.add(logoutButton);
		
		return panel;
	}
	
	private static JFrame createProductCatalogFrame()
	{
		JFrame frame = new JFrame("Product Catalog");
		frame.setSize(400, 300);
		
		JPanel panel = new JPanel();
		panel.setLayout(new BorderLayout());
		
		JTextArea productArea = new JTextArea();
		productArea.setEditable(false);
		refreshProductArea(productArea);
		
		JPanel inputPanel = new JPanel();
		JTextField nameField = new JTextField(10);
		JTextField priceField = new JTextField(5);
		JButton addButton = new JButton("Add Product");
		
		inputPanel.add(new JLabel("Name:"));
		inputPanel.add(nameField);
		inputPanel.add(new JLabel("Price:"));
		inputPanel.add(priceField);
		inputPanel.add(addButton);
		
		addButton.addActionListener(e -> {
			try
			{
				String name = nameField.getText();
				double price = Double.parseDouble(priceField.getText());
				products.add(new Product(name, price));
			} catch (NumberFormatException ex) 
			{
				JOptionPane.showMessageDialog(frame, "Invalid price!");
			}
		});
		
		panel.add(new JScrollPane(productArea), BorderLayout.CENTER);
		panel.add(inputPanel, BorderLayout.SOUTH);
		
		frame.add(panel);
		return frame;
	}
	
	private static JFrame createSocialFeedFrame()
	{
		JFrame frame = new JFrame("Social Feed");
		frame.setSize(400, 300);
		
		JPanel panel = new JPanel();
		panel.setLayout(new BorderLayout());
		
		JTextArea postArea = new JTextArea();
		postArea.setEditable(false);
		refreshPostArea(postArea);
		
		JPanel inputPanel = new JPanel();
		JTextField postField = new JTextField(20);
		JButton postButton = new JButton("Post");
		
		inputPanel.add(new JLabel("Post:"));
		inputPanel.add(postField);
		inputPanel.add(postButton);
		
		postButton.addActionListener(e -> {
			String post = postField.getText();
			posts.add(post);
			refreshPostArea(postArea);
		});
		
		panel.add(new JScrollPane(postArea), BorderLayout.CENTER);
		panel.add(inputPanel, BorderLayout.SOUTH);
		
		frame.add(panel);
		return frame;
	}
	
	private static JFrame createDirectorySearchFrame()
	{
		JFrame frame = new JFrame("Directory Search");
		frame.setSize(400, 300);
		
		JPanel panel = new JPanel();
		JLabel pathLabel = new JLabel("Path:");
		JTextField pathField = new JTextField(20);
		JButton searchButton = new JButton("Search");
		JTextArea resultArea = new JTextArea();
		
		panel.add(pathLabel);
		panel.add(pathField);
		panel.add(searchButton);
		panel.add(new JScrollPane(resultArea));
		
		searchButton.addActionListener(e -> {
			String path = pathField.getText();
			File dir = new File(path);
			if (dir.exists() && dir.isDirectory())
			{
				StringBuilder results = new StringBuilder();
				searchDirectory(dir, results);
				resultArea.setText(results.toString());
			} else
			{
				JOptionPane.showMessageDialog(frame,  "Invalid directory!");
			}
		});
		
		frame.add(panel);
		return frame;
	}
	
	private static void refreshProductArea(JTextArea area)
	{
		StringBuilder content = new StringBuilder();
		for (Product product : products)
		{
			content.append(product).append("\n");
		}
		area.setText(content.toString());
	}
	
	private static void refreshPostArea(JTextArea area)
	{
		StringBuilder content = new StringBuilder();
		for (String post : posts)
		{
			content.append(post).append("\n");
		}
		area.setText(content.toString());
	}
	
	private static void searchDirectory(File dir, StringBuilder results)
	{
		for (File file : dir.listFiles())
		{
			if (file.isDirectory())
			{
				searchDirectory(file, results);
			} else
			{
				results.append(file.getAbsolutePath()).append("\n");
			}
		}
	}
	
	private static void logAction(String action)
	{
		try (BufferedWriter writer = new BufferedWriter(new FileWriter(LOG_FILE, true)))
		{
			writer.write(action);
			writer.newLine();
		} catch (IOException e)
		{
			System.out.println("Error writing to log file.");
		}
	}
	
	private static List<String> readLogs() throws IOException
	{
		List<String> logs = new ArrayList<>();
		try (BufferedReader reader = new BufferedReader(new FileReader(LOG_FILE)))
		{
			String line;
			while ((line = reader.readLine()) != null)
			{
				logs.add(line);
			}
		}
		return logs;
	}

}
